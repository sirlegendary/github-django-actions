# name of our workflow
name: Django CI/CD Workflow

# triggers for our workflow
on:
  # opening a pull request to master and develop branch will be a trigger
  pull_request:
    branches:
      - develop
      - master
  # any code pushed to master and develop branch will also be a trigger
  push:
    branches:
      - master
      - develop

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_REGION: ${{ secrets.AWS_REGION }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  IMAGE_TAG: ${{ github.sha }}
  EKS_CLUSTER: ${{ secrets.EKS_CLUSTER }}
  DB_USER: ${{ secrets.DB_USER }}
  DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
  DB_NAME: ${{ secrets.DB_NAME }}
  DB_HOST: postgres # service name

# three job definition
jobs:
  # health-check-job: # health check job for testing and code formatting check
  #   runs-on: ubuntu-latest # os for running the job
  #   services:
  #     postgres: # we need a postgres docker image to be booted a side car service to run the tests that needs a db
  #       image: postgres
  #       env: # the environment variable must match with app/settings.py if block of DATBASES variable otherwise test will fail due to connectivity issue.
  #         POSTGRES_USER: postgres
  #         POSTGRES_PASSWORD: postgres
  #         POSTGRES_DB: github-actions
  #       ports:
  #         - 5432:5432 # exposing 5432 port for application to use
  #       # needed because the postgres container does not provide a healthcheck
  #       options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
  #   steps:
  #     - name: Checkout code # checking our the code at current commit that triggers the workflow
  #       uses: actions/checkout@v2
  #     - name: Cache dependency # caching dependency will make our build faster.
  #       uses: actions/cache@v2 # for more info checkout pip section documentation at https://github.com/actions/cache
  #       with:
  #         path: ~/.cache/pip
  #         key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
  #         restore-keys: |
  #           ${{ runner.os }}-pip-
  #     - name: Setup python environment # setting python environment to 3.x
  #       uses: actions/setup-python@v2
  #       with:
  #         python-version: '3.x' # if you want multiple python version run just use matrix strategy in job config. See the documentation of GitHub Actions
  #     - name: Check Python version # checking the python version to see if 3.x is installed.
  #       run: python --version
  #     - name: Install requirements # install application requirements
  #       run: pip install -r requirements.txt
  #     # - name: Check Syntax # check code formatting
  #     #   run: pycodestyle --statistics .
  #     - name: Run Migrations # run migrations to create table in side car db container
  #       run: python manage.py migrate
  #     - name: Run Test # running tests
  #       run: python manage.py test

  package-job: # package job for building and publishing docker images
    runs-on: ubuntu-latest
    # needs: [health-check-job] # will be fired if and only if health-check-job is passed.
    if: ${{ github.event_name == 'push' }} # will be fired if the trigger event is a push event.
    steps:
      - name: Checkout Code # checking out code.
        uses: actions/checkout@v2
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR            
        id: login-ecr                        
        uses: aws-actions/amazon-ecr-login@v1
      - name: Build, tag, and push the image to Amazon ECR
        id: build-image                                                                                      
        env:                                                                                                          
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}  
        run: |
          docker build -t $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG .
          echo "Pushing image to ECR..."
          docker push $ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:$IMAGE_TAG"

  deploy-job: # deploy job is for deploying our code to google cloud cluster.
    runs-on: ubuntu-latest
    needs: [package-job] # will require package-job to be successful for triggering
    if: ${{ github.event_name == 'push' }} # will be fire if the trigger event is a push event.
    steps:
      - name: Checkout code # checking out code.
        uses: actions/checkout@v2
      - name: Set Repo Location # steps required to find the image id of our image from contiainer registry
        id: repo
        run: echo "::set-output name=repo_name::485159269806.dkr.ecr.us-east-1.amazonaws.com${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}" # we are setting the image location as output to be used in later step
      - name: Check Repo Location
        run: echo ${{ steps.repo.outputs.repo_name }} # checking our repo location
      - name: Install Helm # helm installation in our runner for deploying.
        run: |
          curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
          chmod 700 get_helm.sh
          ./get_helm.sh
      - name: Connect to kubernetes cluster
        run: |
          aws eks --region ${{ env.AWS_REGION }} update-kubeconfig --name ${{ env.EKS_CLUSTER }}
      - name: Get active Nodes
        run: kubectl get nodes
      - name: Install release
        uses: hiberbee/github-action-helm@latest
        with:
          helm: upgrade --install --wait --atomic --set image=${{ steps.repo.outputs.repo_name }} --set user=${{ env.DB_USER }} --set password=${{ env.DB_PASSWORD }} --set host=${{ env.DB_HOST }} --set name=${{ env.DB_NAME }} app ./k8s 
      - name: Check pods # checking pod list to see if they are running.
        run: kubectl get pods
      - name: Get Service details
        run: kubectl get svc
      - name: Make migration
        run: kubectl exec -i "$(kubectl get pods | awk '$0 ~ /app-deployment-/ {print $1}' | head -1)" python manage.py makemigrations
      - name: Run Migrations
        run: kubectl exec -i "$(kubectl get pods | awk '$0 ~ /app-deployment-/ {print $1}' | head -1)" python manage.py migrate